name: Release

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    name: Build and test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        # os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v1

      - name: Use Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
          registry-url: "https://registry.npmjs.org"

      - name: Cache esy dependencies
        uses: actions/cache@v1
        id: cache
        with:
          path: _export
          key: ${{ runner.OS }}-build-${{ hashFiles('esy.lock/index.json') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-

      - name: Install esy
        run: npm install -g esy@0.6.6

      - name: Import dependencies
        if: steps.cache.outputs.cache-hit == 'true'
        run: esy import-build _export/*

      - name: Install dependencies
        run: esy install

      - name: Build
        run: esy build

      - name: Run tests
        run: esy test

      - name: Export dependencies
        run: esy export-dependencies

      - name: Upload artifacts for ${{ matrix.os }}
        uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.os }}-artifact
          path: _build/default/bin/Bin.exe

  publish:
    needs: build
    name: Publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - name: Use Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Fetch git tags
        run: git fetch --tags --force

      - name: Make NPM release skeleton
        run: node scripts/release-make-skeleton.js

      - name: Download linux artifacts
        if: success()
        uses: actions/download-artifact@master
        with:
          name: ubuntu-latest-artifact
          path: _release/platform-linux-x64

      - name: Download macOS artifacts
        if: success()
        uses: actions/download-artifact@master
        with:
          name: macos-latest-artifact
          path: _release/platform-darwin-x64

      # - name: Download windows artifacts
      # if: success()
      #   uses: actions/download-artifact@master
      #   with:
      #     name: windows-latest-artifact
      #     path: _release/platform-windows-x64

      - name: Create archives for Github release
        run: |
          cd _release/platform-darwin-x64
          zip -r ../../rules-of-hooks-ppx-darwin-x64.zip .
          cd ../..

          cd _release/platform-linux-x64
          zip -r ../../rules-of-hooks-ppx-linux-x64.zip .
          cd ../..

          # cd _release/platform-windows-x64
          # zip -r ../../rules-of-hooks-ppx-windows-x64.zip .
          # cd ../..

      - name: Create Github release
        id: create_release
        if: "startsWith(github.ref, 'refs/tags/v')"
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload rules-of-hooks-ppx-darwin-x64.zip to Github release
        if: "startsWith(github.ref, 'refs/tags/v')"
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: rules-of-hooks-ppx-darwin-x64.zip
          asset_name: rules-of-hooks-ppx-darwin-x64.zip
          asset_content_type: application/gzip

      - name: Upload rules-of-hooks-ppx-linux-x64.zip to Github release
        if: "startsWith(github.ref, 'refs/tags/v')"
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: rules-of-hooks-ppx-linux-x64.zip
          asset_name: rules-of-hooks-ppx-linux-x64.zip
          asset_content_type: application/gzip

      # - name: Upload rules-of-hooks-ppx-windows-x64.zip to Github release
      #   if: github.ref != 'refs/heads/master'
      #   uses: actions/upload-release-asset@v1.0.1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: rules-of-hooks-ppx-windows-x64.zip
      #     asset_name: rules-of-hooks-ppx-windows-x64.zip
      #     asset_content_type: application/gzip

      - name: Print short SHA
        id: sha
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Release nightly NPM package
        if: github.event_name == 'pull_request'
        run: |
          npm config set //registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN
          npm version prerelease --preid nightly.${{ steps.sha.outputs.sha_short }} -no-git-tag-version
          npm publish --access public --tag nightly
        working-directory: ./_release
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}

      - name: Release NPM package
        if: "startsWith(github.ref, 'refs/tags/v')"
        run: |
          npm config set //registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN
          npm publish --access public
        working-directory: ./_release
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
